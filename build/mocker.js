require("source-map-support").install();
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("faker"));
	else if(typeof define === 'function' && define.amd)
		define(["faker"], factory);
	else if(typeof exports === 'object')
		exports["MockerData"] = factory(require("faker"));
	else
		root["MockerData"] = factory(root["faker"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _srcIndexTs = __webpack_require__(1);
	
	var _srcIndexTs2 = _interopRequireDefault(_srcIndexTs);
	
	var mocker = function mocker(config) {
	    return new _srcIndexTs2['default'](config);
	};
	
	exports['default'] = mocker;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(2);
	var utils = __webpack_require__(3);
	var Mocker = (function () {
	    function Mocker(config) {
	        this.config = config;
	        this.data = {};
	    }
	    Mocker.prototype.generate = function (entity, options) {
	        var _this = this;
	        var Phase1 = new Promise(function (resolve, reject) {
	            var d = [];
	            if (Number.isInteger(options)) {
	                for (var i = 0; i < options; i++) {
	                    d.push(_this.generateEntity(_this.config[entity]));
	                }
	            }
	            else {
	                var cfg = _this.config[entity];
	                var f = options.uniqueField;
	                var possibleValues = cfg[f].values;
	                var length_1 = possibleValues.length;
	                for (var i = 0; i < length_1; i++) {
	                    var initialData = {};
	                    initialData[f] = possibleValues[i];
	                    d.push(_this.generateEntity(_this.config[entity], initialData));
	                }
	            }
	            _this.data[entity + 's'] = d;
	            resolve(_this.data);
	        });
	        return Phase1;
	    };
	    Mocker.prototype.generateEachData = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var cfg = _this.config;
	            var keys = Object.keys(cfg);
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                _this.data[key + 's'] = [_this.generateEntity(cfg[key])];
	            }
	            resolve(_this.data);
	        });
	    };
	    Mocker.prototype.generateEntity = function (entityConfig, initialObject) {
	        var _this = this;
	        if (initialObject === void 0) { initialObject = {}; }
	        var keys = Object.keys(entityConfig);
	        var data = initialObject;
	        var initialKeys = Object.keys(data);
	        if (utils.iamLastParent(entityConfig)) {
	            keys.map(function (k) {
	                if (initialKeys.indexOf(k) === -1) {
	                    var field = entityConfig[k];
	                    if (!utils.isConditional(k)) {
	                        if (!utils.isArray(field)) {
	                            if (field.values || field.faker || field.function) {
	                                data[k] = _this.generateField(field, data);
	                            }
	                        }
	                        else {
	                            if (field[0].values || field[0].faker || field[0].function) {
	                                data[k] = _this.generateArrayField(field[0], field[1], data);
	                            }
	                        }
	                    }
	                    else {
	                        if (!utils.isArray(field)) {
	                            var key = k.split(',');
	                            if (utils.evalWithContextData(key[0], data)) {
	                                data[key[1]] = _this.generateField(field, data);
	                            }
	                        }
	                        else {
	                            var key = k.split(',');
	                            if (utils.evalWithContextData(key[0], data)) {
	                                data[key[1]] = _this.generateArrayField(field[0], field[1], data);
	                            }
	                        }
	                    }
	                }
	            });
	        }
	        return data;
	    };
	    Mocker.prototype.generateArrayField = function (fieldConfig, arrayConfig, data) {
	        var array = [];
	        var length = utils.fieldArrayCalcLength(arrayConfig);
	        for (var i = 0; i < length; i++) {
	            array.push(this.generateField(fieldConfig, data));
	        }
	        return array;
	    };
	    Mocker.prototype.generateField = function (config, object) {
	        if (config.faker) {
	            var split = config.faker.split('.');
	            return faker[split[0]][split[1]].call();
	        }
	        else if (config.values) {
	            return faker.random.arrayElement(config.values);
	        }
	        else if (config.function) {
	            var db = this.data;
	            return config.function.call({ object: object, faker: faker, db: db });
	        }
	        else if (config.static) {
	            return config.static;
	        }
	        else {
	            return null;
	        }
	    };
	    return Mocker;
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Mocker;


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("faker");

/***/ },
/* 3 */
/***/ function(module, exports) {

	exports.each = function (arr, fn) {
	    for (var i = 0; i < arr.length; ++i) {
	        fn(arr[i]);
	    }
	};
	exports.iamLastChild = function (obj) {
	    if (!this.isArray(obj)) {
	        var ks = Object.keys(obj);
	        var last = null;
	        for (var i = 0; i < ks.length; i++) {
	            var key = ks[i];
	            if (this.isObject(obj[key])) {
	                last = false;
	                break;
	            }
	            else {
	                last = true;
	            }
	        }
	        return last;
	    }
	    else {
	        return true;
	    }
	};
	exports.iamLastParent = function (obj) {
	    var ks = Object.keys(obj);
	    var last = null;
	    for (var i = 0; i < ks.length; i++) {
	        var key = ks[i];
	        if (this.iamLastChild(obj[key])) {
	            last = true;
	        }
	        else {
	            last = false;
	            break;
	        }
	    }
	    return last;
	};
	exports.isConditional = function (str) {
	    var arr = str.split(',');
	    if (arr.length > 1) {
	        return true;
	    }
	    else {
	        return false;
	    }
	};
	exports.evalWithContextData = function (key, object) {
	    return eval(key);
	};
	exports.fieldArrayCalcLength = function (config) {
	    if (config.fixedLength) {
	        return config.length;
	    }
	    else {
	        return Math.floor((Math.random() * config.length) + 1);
	    }
	};
	exports.isArray = function (x) {
	    if (Object.prototype.toString.call(x) === '[object Array]') {
	        return true;
	    }
	    return false;
	};
	exports.isObject = function (x) {
	    if (Object.prototype.toString.call(x) === '[object Object]') {
	        return true;
	    }
	    return false;
	};


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;base64,