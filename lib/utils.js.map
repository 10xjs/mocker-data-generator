{"version":3,"sources":["../src/utils.js"],"names":["isArray","arg","Object","prototype","toString","call","isObject","evalWithContextData","key","object","db","eval","fieldArrayCalcLength","config","fixedArrayLength","length","fixedLength","Math","floor","random","iamLastParent","obj","last","ks","keys","i","k","iamLastChild","parent","el","isConditional","str","arr","split","cleanVirtuals","paths","options","objectCleaner","path","lvls","symbol","dest","field","getOwnPropertyNames","pop","join","forEachPath","forPaths","it","res","calculateKey","conditionalField","acc","result"],"mappings":";;;;;AAAO,IAAMA,4BAAU,SAAVA,OAAU,CAASC,GAAT,EAAc;AACjC,WAAOC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,gBAA/C;AACH,CAFM;;AAIA,IAAMK,8BAAW,SAAXA,QAAW,CAAUL,GAAV,EAAe;AACnC,WAAOC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAA/C;AACH,CAFM;;AAIA,IAAMM,oDAAuB,SAAvBA,mBAAuB,CAAUC,GAAV,EAAeC,MAAf,EAAuBC,EAAvB,EAA2B;AAC3D;AACA,WAAOC,KAAKH,GAAL,CAAP;AACH,CAHM;;AAKA,IAAMI,sDAAuB,SAAvBA,oBAAuB,CAAUC,MAAV,EAAkBC,gBAAlB,EAAoC;AACpE,QAAIC,eAAJ;AACA,QAAIF,OAAOG,WAAX,EAAwB;AACpBD,iBAASF,OAAOE,MAAP,GAAgBD,gBAAzB;AACH,KAFD,MAEO;AACHC,iBAASE,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBN,OAAOE,MAAxB,GAAkC,CAA7C,CAAT;AACH;AACD,WAAOA,MAAP;AACH,CARM;;AAUA,IAAMK,wCAAgB,SAAhBA,aAAgB,CAASC,GAAT,EAAc;AACvC,QAAIC,OAAO,KAAX;AACA,QAAIhB,SAASe,GAAT,CAAJ,EAAmB;AACf,YAAIE,KAAKrB,OAAOsB,IAAP,CAAYH,GAAZ,CAAT;;AAEA,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIF,GAAGR,MAAvB,EAA+BU,GAA/B,EAAoC;AAChC,gBAAIC,IAAIH,GAAGE,CAAH,CAAR;AACAH,mBAAOK,aAAaN,GAAb,EAAkBK,CAAlB,CAAP;AACA,gBAAI,CAACJ,IAAL,EAAU;AACN;AACH;AACJ;AACJ,KAVD,MAUO;AACHA,eAAO,IAAP;AACH;AACD,WAAOA,IAAP;AACH,CAhBM;;AAkBA,IAAMK,sCAAe,SAAfA,YAAe,CAAUC,MAAV,EAAkBF,CAAlB,EAAqB;AAC7C,QAAI1B,QAAQ4B,OAAOF,CAAP,CAAR,CAAJ,EAAwB;AACpB,YAAIJ,OAAO,KAAX;;AAEA,YAAIM,OAAOF,CAAP,EAAUX,MAAV,KAAqB,CAAzB,EAA2B;AACvB,mBAAO,IAAP;AACH;;AAED,aAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIG,OAAOF,CAAP,EAAUX,MAA9B,EAAsCU,GAAtC,EAA2C;AACvC,gBAAII,KAAKD,OAAOF,CAAP,EAAUD,CAAV,CAAT;AACAH,mBAAO,CAAChB,SAASuB,EAAT,CAAR;AACA,gBAAIP,IAAJ,EAAS;AACL;AACH;AACJ;AACD,eAAOA,IAAP;AACH,KAfD,MAeO;AACH,eAAO,CAAChB,SAASsB,OAAOF,CAAP,CAAT,CAAR;AACH;AACJ,CAnBM;;AAqBA,IAAMI,wCAAgB,SAAhBA,aAAgB,CAAUC,GAAV,EAAe;AACxC,QAAIC,MAAMD,IAAIE,KAAJ,CAAU,GAAV,CAAV;AACA,WAAOD,IAAIjB,MAAJ,GAAa,CAApB;AACH,CAHM;;AAKA,IAAMmB,wCAAgB,SAAhBA,aAAgB,CAAUC,KAAV,EAAiB1B,MAAjB,EAAyB2B,OAAzB,EAAkC;;AAE3D;AACA,QAAIC,wCAAgB,SAAhBA,aAAgB,CAAWC,IAAX,EAAiBjB,GAAjB,EAAsBe,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZG,4BADY,GACLD,KAAKL,KAAL,CAAWG,QAAQI,MAAnB,CADK;AAEZC,4BAFY,GAELpB,GAFK;;AAAA,8BAIZ,CAACkB,IAAD,IAASA,KAAKxB,MAAL,KAAgB,CAJb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,4BAKXM,GALW;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOPI,yBAPO,GAOH,CAPG;;AAAA;AAAA,8BAOAA,IAAGc,KAAKxB,MAPR;AAAA;AAAA;AAAA;;AAQR2B,6BARQ,GAQAH,KAAKd,CAAL,CARA;;AAAA,8BASRA,MAAMc,KAAKxB,MAAL,GAAc,CAApB,IAAyB0B,KAAKC,KAAL,CATjB;AAAA;AAAA;AAAA;;AAAA,8BAUJxC,OAAOyC,mBAAP,CAA2BF,KAAKC,KAAL,CAA3B,EAAwC3B,MAAxC,GAAiD,CAV7C;AAAA;AAAA;AAAA;;AAWJ,+BAAO0B,KAAKC,KAAL,CAAP;AAXI;;AAAA;AAAA;AAAA;;AAAA;AAeRD,+BAAOA,KAAKC,KAAL,CAAP;;AAfQ;AAOgBjB,2BAPhB;AAAA;AAAA;;AAAA;AAkBhBc,6BAAKK,GAAL;;AAlBgB,8BAoBZL,KAAKxB,MAAL,GAAc,CApBF;AAAA;AAAA;AAAA;;AAAA,sDAqBLsB,cAAcE,KAAKM,IAAL,CAAUT,QAAQI,MAAlB,CAAd,EAAyCnB,GAAzC,EAA8Ce,OAA9C,CArBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAhBC,aAAgB;AAAA,KAAhB,CAAJ;;AA2BA,QAAIS,sCAAc,SAAdA,WAAc,CAAWR,IAAX,EAAiB7B,MAAjB,EAAyB2B,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVG,4BADU,GACHD,KAAKL,KAAL,CAAWG,QAAQI,MAAnB,CADG;AAEVC,4BAFU,GAEHhC,MAFG;AAILgB,yBAJK,GAID,CAJC;;AAAA;AAAA,8BAIEA,IAAIc,KAAKxB,MAJX;AAAA;AAAA;AAAA;;AAKN2B,6BALM,GAKEH,KAAKd,CAAL,CALF;;AAAA,8BAMNA,MAAMc,KAAKxB,MAAL,GAAc,CANd;AAAA;AAAA;AAAA;;AAON;AACA,+BAAO0B,KAAKC,KAAL,CAAP;AACA;AATM,uDAUCL,cAAcC,IAAd,EAAoB7B,MAApB,EAA4B2B,OAA5B,CAVD;;AAAA;AAAA;AAAA;;AAAA;AAYNK,+BAAOA,KAAKC,KAAL,CAAP;;AAZM;AAImBjB,2BAJnB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAdqB,WAAc;AAAA,KAAd,CAAJ;;AAiBA,QAAIC,mCAAW,SAAXA,QAAW,CAAWZ,KAAX,EAAkB1B,MAAlB,EAA0B2B,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACFX,yBADE,GACE,CADF;;AAAA;AAAA,8BACKA,IAAIU,MAAMpB,MADf;AAAA;AAAA;AAAA;;AAEHuB,4BAFG,GAEIH,MAAMV,CAAN,CAFJ;AAAA,uDAGAqB,YAAYR,IAAZ,EAAkB7B,MAAlB,EAA0B2B,OAA1B,CAHA;;AAAA;AACuBX,2BADvB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAXsB,QAAW;AAAA,KAAX,CAAJ;;AAOA,QAAIC,KAAKD,SAASZ,KAAT,EAAgB1B,MAAhB,EAAwB2B,OAAxB,CAAT;AAtD2D;AAAA;AAAA;;AAAA;AAuD3D,6BAAkBY,EAAlB,8HAAsB;AAAA,gBAAXC,GAAW;AAAG;AAvDkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyD3D,WAAOxC,MAAP;AACH,CA1DM;;AA4DA,IAAMyC,sCAAe,SAAfA,YAAe,CAASxB,CAAT,EAAW;AACnC,QAAI,CAACI,cAAcJ,CAAd,CAAL,EAAsB;AAClB,eAAOA,CAAP;AACH,KAFD,MAEO;AACH,YAAIlB,MAAMkB,EAAEO,KAAF,CAAQ,GAAR,CAAV;AACA,eAAOzB,IAAI,CAAJ,CAAP;AACH;AACJ,CAPM;;AASA,IAAM2C,8CAAmB,SAAnBA,gBAAmB,CAAUC,GAAV,EAAe1B,CAAf,EAAkB2B,MAAlB,EAA0B5C,MAA1B,EAAiC;AAC7D,QAAI,CAACqB,cAAcJ,CAAd,CAAL,EAAsB;AAClB0B,YAAI1B,CAAJ,IAAS2B,MAAT;AACH,KAFD,MAEO;AACH,YAAI7C,MAAMkB,EAAEO,KAAF,CAAQ,GAAR,CAAV;AACA,YAAI1B,oBAAoBC,IAAI,CAAJ,CAApB,EAA4BC,MAA5B,CAAJ,EAAwC;AACpC2C,gBAAI5C,IAAI,CAAJ,CAAJ,IAAc6C,MAAd;AACH;AACJ;AACD;AACH,CAVM","file":"utils.js","sourcesContent":["export const isArray = function(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n}\n\nexport const isObject = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Object]';\n}\n\nexport const evalWithContextData =  function (key, object, db) {\n    // In this (way, we can pass object and use inside the eval string\n    return eval(key)\n}\n\nexport const fieldArrayCalcLength = function (config, fixedArrayLength) {\n    let length\n    if (config.fixedLength) {\n        length = config.length - fixedArrayLength\n    } else {\n        length = Math.floor((Math.random() * config.length) + 1)\n    }\n    return length\n}\n\nexport const iamLastParent = function(obj) {\n    let last = false\n    if (isObject(obj)) {\n        let ks = Object.keys(obj)\n\n        for (let i = 0; i < ks.length; i++) {\n            let k = ks[i]\n            last = iamLastChild(obj, k)\n            if (!last){\n                break\n            }\n        }\n    } else {\n        last = true\n    }\n    return last\n}\n\nexport const iamLastChild = function (parent, k) {\n    if (isArray(parent[k])) {\n        let last = false\n\n        if (parent[k].length === 0){\n            return true\n        }\n\n        for (let i = 0; i < parent[k].length; i++) {\n            let el = parent[k][i]\n            last = !isObject(el)\n            if (last){\n                break\n            }\n        }\n        return last\n    } else {\n        return !isObject(parent[k])\n    }\n}\n\nexport const isConditional = function (str) {\n    let arr = str.split(',')\n    return arr.length > 1\n}\n\nexport const cleanVirtuals = function (paths, object, options) {\n\n    //clean specific paths\n    let objectCleaner = function *(path, obj, options) {\n        let lvls = path.split(options.symbol)\n        let dest = obj\n\n        if (!lvls || lvls.length === 0) { return }\n        if (!obj) { return }\n\n        for (var i = 0; i< lvls.length; i++) {\n            let field = lvls[i]\n            if (i === lvls.length - 1 && dest[field]) {\n                if (Object.getOwnPropertyNames(dest[field]).length < 1) {\n                    delete dest[field]\n                    break\n                }\n            } else {\n                dest = dest[field]\n            }\n        }\n        lvls.pop()\n\n        if (lvls.length > 0){\n            yield *objectCleaner(lvls.join(options.symbol), obj, options)\n        } else {\n            return\n        }\n    }\n\n    let forEachPath = function *(path, object, options) {\n        let lvls = path.split(options.symbol)\n        let dest = object\n\n        for (var i = 0; i < lvls.length; i++) {\n            let field = lvls[i]\n            if (i === lvls.length - 1) {\n                // delete specific path\n                delete dest[field]\n                //clean specific path\n                yield *objectCleaner(path, object, options)\n            } else {\n                dest = dest[field]\n            }\n        }\n    }\n\n    let forPaths = function *(paths, object, options) {\n        for (var i = 0; i < paths.length; i++) {\n            let path = paths[i]\n            yield *forEachPath(path, object, options)\n        }\n    }\n\n    let it = forPaths(paths, object, options);\n    for (const res of it) { }\n\n    return object\n}\n\nexport const calculateKey = function(k){\n    if (!isConditional(k)){\n        return k\n    } else {\n        let key = k.split(',')\n        return key[0]\n    }\n}\n\nexport const conditionalField = function (acc, k, result, object){\n    if (!isConditional(k)){\n        acc[k] = result\n    } else {\n        let key = k.split(',')\n        if (evalWithContextData(key[0], object)){\n            acc[key[1]] = result\n        }\n    }\n    return\n}\n"]}