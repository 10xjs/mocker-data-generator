{"version":3,"sources":["../src/Schema.js"],"names":[],"mappings":"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","file":"Schema.js","sourcesContent":["import {isObject, isArray, iamLastParent, iamLastChild, fieldArrayCalcLength, stringToFn, evalWithContextData, isConditional, fnCallWithContext, randexpWrapper} from './utils'\n\nimport Generator from './Generator'\n\nlet iterate = function (obj, res, currentPath) {\n    if (!currentPath) { currentPath = [] }\n    Object.keys(obj)\n        .map((k) => {\n            let value = obj[k]\n\n            let path = currentPath.slice(0)\n            path.push(k)\n\n\n            if (iamLastParent(value)) {\n\n                if (path){\n                    if ( isArray(value) ){\n                        if (value[0] && value[0].virtual){\n                            this.virtualPaths.push(path.toString())\n                        }\n                    } else {\n                        if (value.virtual){\n                            this.virtualPaths.push(path.toString())\n                        }\n                    }\n                }\n\n                let fieldCalculated = this.proccessLeaf(value)\n\n                if (!isConditional(k)){\n                    res[k] = fieldCalculated\n                } else {\n                    let key = k.split(',')\n                    if (evalWithContextData(key[0], this.object)){\n                        res[key[1]] = fieldCalculated\n                    }\n                }\n            } else {\n                res[k] = {}\n                iterate.call(this, value, res[k], path)\n            }\n        })\n}\n\nexport default class Schema extends Generator{\n    constructor(name, cfg, options){\n        super()\n        this.schema = cfg\n        this.name = name\n        this.options = options\n\n        // Temp fields\n        this.DB = {}\n        this.object = {}\n        this.virtualPaths = []\n    }\n\n    proccessLeaf (field) {\n\n        if ( isArray(field) ){\n            let fieldConfig = field[0]\n            let na = []\n            let array = []\n            if (fieldConfig.concat){\n                na = evalWithContextData(fieldConfig.concat, this.object, this.DB)\n                //Strict Mode\n                na = (fieldConfig.concatStrict) ? [...new Set(na)] : na\n            }\n\n            let length = fieldArrayCalcLength(fieldConfig, na.length)\n\n            Array.from(new Array(length)).map(() => {\n                array.push(this.generateField(fieldConfig))\n            })\n\n            return array.concat(na)\n        } else {\n            return this.generateField(field)\n        }\n    }\n\n    generateField(cfg) {\n        let result = null\n        let generators = ['faker', 'chance', 'casual', 'randexp', 'self', 'db', 'hasOne', 'hasMany', 'static', 'function', 'values', 'incrementalId']\n\n            generators.map((key) => {\n                try {\n                    if (cfg.hasOwnProperty(key)){\n                        result = this[key](cfg)\n                    }\n                } catch(e){\n                    result = null\n                    console.error('Error on generator [' + key + ']: ', e)\n                }\n            })\n\n\n        return result\n    }\n\n    buildSingle (schema) {\n        if (iamLastParent(schema)) {\n            this.object = this.proccessLeaf(schema)\n        } else {\n            iterate.call(this, schema, this.object)\n        }\n    }\n\n    build (db){\n        this.object = {}\n        this.DB = db ? db : {}\n        this.DB[this.name] = []\n        if (Number.isInteger(this.options)){\n\n            Array.from(new Array(this.options)).map(() => {\n                this.buildSingle(this.schema)\n                this.DB[this.name].push(this.object)\n                this.object = {}\n            })\n\n        } else if (isObject(this.options)){\n            let f = this.options.uniqueField\n            let entityConfig = this.schema\n            let possibleValues\n            if (f === '.') {\n                possibleValues = this.schema.values\n            } else {\n                if (this.schema[f]){\n                    if (isArray(this.schema[f].values)){\n                        possibleValues = this.schema[f].values\n                    } else {\n                        possibleValues = this.schema[f]\n                    }\n                } else {\n                    console.error('The field ' + f + ', on the scheema ' + this.name + ' not exists.')\n                    return this.DB[this.name]\n                }\n\n            }\n\n            if ( !isArray(possibleValues) ){\n                console.error('The field ' + f + ', on the scheema ' + this.name + ' is not an array.')\n                return this.DB[this.name]\n            }\n\n            possibleValues.map((value) => {\n\n                if (f === '.') {\n                    return\n                }\n\n                entityConfig[f] = {static: value}\n\n                this.buildSingle(entityConfig)\n                this.DB[this.name].push(this.object)\n                this.object = {}\n            })\n        } else {\n            console.error('An string ' + this.options + ', is not recognized as a parameter.')\n        }\n        return this.DB[this.name]\n    }\n\n\n}\n"]}