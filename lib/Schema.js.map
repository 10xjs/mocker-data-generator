{"version":3,"sources":["../src/Schema.js"],"names":[],"mappings":"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","file":"Schema.js","sourcesContent":["import {isArray, iamLastParent, iamLastChild, fieldArrayCalcLength, stringToFn, evalWithContextData, isConditional} from './utils'\nimport faker from 'faker'\nimport Chance from 'chance'\nconst chance = new Chance()\n\nlet iterate = function (obj, res, currentPath) {\n    if (!currentPath) { currentPath = [] }\n    let fields = Object.keys(obj)\n    for (var i = 0; i< fields.length; i++) {\n\n        let k = fields[i]\n        let value = obj[k]\n\n        let path = currentPath.slice(0)\n        path.push(k)\n\n\n        if (iamLastParent(value)) {\n\n            if (path){\n                if ( isArray(value) ){\n                    if (value[0] && value[0].virtual){\n                        this.virtualPaths.push(path.toString())\n                    }\n                } else {\n                    if (value.virtual){\n                        this.virtualPaths.push(path.toString())\n                    }\n                }\n            }\n\n            let fieldCalculated = this.proccessLeaf(value)\n\n            if (!isConditional(k)){\n                res[k] = fieldCalculated\n            } else {\n                let key = k.split(',')\n                if (evalWithContextData(key[0], this.result)){\n                    res[key[1]] = fieldCalculated\n                }\n            }\n        } else {\n            res[k] = {}\n            iterate.call(this, value, res[k], path)\n        }\n    }\n}\n\nexport default class Schema {\n    constructor(name, cfg, options){\n        this.schema = cfg\n        this.name = name\n        this.options = options\n\n        // Temp fields\n        this.db = {}\n        this.result = {}\n        this.virtualPaths = []\n    }\n\n    proccessLeaf (field) {\n        if ( isArray(field) ){\n            let fieldConfig = field[0]\n            let array = []\n            let length = fieldArrayCalcLength(fieldConfig)\n            for (let i = 0; i < length; i++) {\n                array.push(this.generateField(fieldConfig))\n            }\n            return array\n        } else {\n            return this.generateField(field)\n        }\n    }\n\n    generateField(config) {\n        let object = this.result\n        let db = this.db\n\n        if (config.faker){\n            return stringToFn('faker', config.faker, db, object)\n        } else if (config.chance) {\n            return stringToFn('chance', config.chance, db, object)\n        } else if (config.values) {\n            let i = Math.floor(config.values.length * Math.random());\n            return config.values[i]\n        } else if (config.function) {\n            return config.function.call({object, faker, chance, db})\n        } else if (config.static) {\n            return config.static\n        } else if (config.hasOwnProperty('incrementalId')) {\n            let n = 0\n\n            if (db[this.name] && db[this.name].length){\n                n = db[this.name].length\n            }\n            if (config.incrementalId === true){\n                config.incrementalId = 0\n            }\n            return (n + parseInt(config.incrementalId))\n        } else {\n            return null\n        }\n    }\n\n    buildSingle (schema) {\n        if (iamLastParent(schema)) {\n            this.result = this.proccessLeaf(schema)\n        } else {\n            iterate.call(this, schema, this.result)\n        }\n    }\n\n    build (db){\n        this.result = {}\n        this.db = db ? db : {}\n        this.db[this.name] = []\n\n        if (Number.isInteger(this.options)){\n\n            Array.apply(null, Array(this.options)).map(() => {\n                this.buildSingle(this.schema)\n                this.db[this.name].push(this.result)\n                this.result = {}\n            })\n\n        } else {\n            let f = this.options.uniqueField\n            let entityConfig = this.schema\n            let possibleValues\n            if (f === '.') {\n                possibleValues = this.schema.values\n            } else {\n                possibleValues = this.schema[f].values\n            }\n\n\n            possibleValues.map((value) => {\n\n                if (f === '.') {\n                    return\n                }\n\n                entityConfig[f] = {static: value}\n\n                this.buildSingle(entityConfig)\n                this.db[this.name].push(this.result)\n                this.result = {}\n            })\n        }\n\n        return this.db[this.name]\n    }\n\n\n}\n"]}