{"version":3,"sources":["../src/Schema.js"],"names":["iterate","obj","res","currentPath","Object","keys","map","k","value","path","slice","push","virtual","virtualPaths","toString","fieldCalculated","proccessLeaf","key","split","object","call","Schema","name","cfg","options","schema","DB","field","fieldConfig","na","array","concat","concatStrict","Set","length","Array","from","generateField","result","generators","hasOwnProperty","e","db","Number","isInteger","buildSingle","f","uniqueField","entityConfig","possibleValues","values","console","error","static"],"mappings":"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","file":"Schema.js","sourcesContent":["import {isObject, isArray, iamLastParent, iamLastChild, fieldArrayCalcLength, stringToFn, evalWithContextData, isConditional, fnCallWithContext, randexpWrapper} from './utils'\n\nimport Generator from './Generator'\n\nlet iterate = function (obj, res, currentPath) {\n    if (!currentPath) { currentPath = [] }\n    Object.keys(obj)\n        .map((k) => {\n            let value = obj[k]\n\n            let path = currentPath.slice(0)\n            path.push(k)\n\n\n            if (iamLastParent(value)) {\n\n                if (path){\n                    if ( isArray(value) ){\n                        if (value[0] && value[0].virtual){\n                            this.virtualPaths.push(path.toString())\n                        }\n                    } else {\n                        if (value.virtual){\n                            this.virtualPaths.push(path.toString())\n                        }\n                    }\n                }\n\n                let fieldCalculated = this.proccessLeaf(value)\n\n                if (!isConditional(k)){\n                    res[k] = fieldCalculated\n                } else {\n                    let key = k.split(',')\n                    if (evalWithContextData(key[0], this.object)){\n                        res[key[1]] = fieldCalculated\n                    }\n                }\n            } else {\n                res[k] = {}\n                iterate.call(this, value, res[k], path)\n            }\n        })\n}\n\nexport default class Schema extends Generator{\n    constructor(name, cfg, options){\n        super()\n        this.schema = cfg\n        this.name = name\n        this.options = options\n\n        // Temp fields\n        this.DB = {}\n        this.object = {}\n        this.virtualPaths = []\n    }\n\n    proccessLeaf (field) {\n\n        if ( isArray(field) ){\n            let fieldConfig = field[0]\n            let na = []\n            let array = []\n            if (fieldConfig.concat){\n                na = evalWithContextData(fieldConfig.concat, this.object, this.DB)\n                //Strict Mode\n                na = (fieldConfig.concatStrict) ? [...new Set(na)] : na\n            }\n\n            let length = fieldArrayCalcLength(fieldConfig, na.length)\n\n            Array.from(new Array(length)).map(() => {\n                array.push(this.generateField(fieldConfig))\n            })\n\n            return array.concat(na)\n        } else {\n            return this.generateField(field)\n        }\n    }\n\n    generateField(cfg) {\n        let result = null\n        let generators = ['faker', 'chance', 'casual', 'randexp', 'self', 'db', 'eval', 'hasOne', 'hasMany', 'static', 'function', 'values', 'incrementalId']\n\n            generators.map((key) => {\n                try {\n                    if (cfg.hasOwnProperty(key)){\n                        result = this[key](cfg)\n                    }\n                } catch(e){\n                    result = null\n                    throw 'Generator: \"' + key + '\" ' + e\n                }\n            })\n\n\n        return result\n    }\n\n    buildSingle (schema) {\n        if (iamLastParent(schema)) {\n            this.object = this.proccessLeaf(schema)\n        } else {\n            iterate.call(this, schema, this.object)\n        }\n    }\n\n    build (db){\n        this.object = {}\n        this.DB = db ? db : {}\n        this.DB[this.name] = []\n        if (Number.isInteger(this.options)){\n\n            Array.from(new Array(this.options)).map(() => {\n                this.buildSingle(this.schema)\n                this.DB[this.name].push(this.object)\n                this.object = {}\n            })\n\n        } else if (isObject(this.options)){\n            let f = this.options.uniqueField\n            let entityConfig = this.schema\n            let possibleValues\n            if (f === '.') {\n                possibleValues = this.schema.values\n            } else {\n                if (this.schema[f]){\n                    if (isArray(this.schema[f].values)){\n                        possibleValues = this.schema[f].values\n                    } else {\n                        possibleValues = this.schema[f]\n                    }\n                } else {\n                    console.error('The field ' + f + ', on the scheema ' + this.name + ' not exists.')\n                    return this.DB[this.name]\n                }\n\n            }\n\n            if ( !isArray(possibleValues) ){\n                console.error('The field ' + f + ', on the scheema ' + this.name + ' is not an array.')\n                return this.DB[this.name]\n            }\n\n            possibleValues.map((value) => {\n\n                if (f === '.') {\n                    return\n                }\n\n                entityConfig[f] = {static: value}\n\n                this.buildSingle(entityConfig)\n                this.DB[this.name].push(this.object)\n                this.object = {}\n            })\n        } else {\n            console.error('An string ' + this.options + ', is not recognized as a parameter.')\n        }\n        return this.DB[this.name]\n    }\n\n\n}\n"]}