{"version":3,"sources":["../src/Schema.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,SAAS,sBAAT;;AAEN,IAAI,UAAU,SAAV,OAAU,CAAU,GAAV,EAAe,GAAf,EAAoB,WAApB,EAAiC;;;AAC3C,QAAI,CAAC,WAAD,EAAc;AAAE,sBAAc,EAAd,CAAF;KAAlB;AACA,WAAO,IAAP,CAAY,GAAZ,EACK,GADL,CACS,UAAC,CAAD,EAAO;AACR,YAAI,QAAQ,IAAI,CAAJ,CAAR,CADI;;AAGR,YAAI,OAAO,YAAY,KAAZ,CAAkB,CAAlB,CAAP,CAHI;AAIR,aAAK,IAAL,CAAU,CAAV,EAJQ;;AAOR,YAAI,0BAAc,KAAd,CAAJ,EAA0B;;AAEtB,gBAAI,IAAJ,EAAS;AACL,oBAAK,oBAAQ,KAAR,CAAL,EAAqB;AACjB,wBAAI,MAAM,CAAN,KAAY,MAAM,CAAN,EAAS,OAAT,EAAiB;AAC7B,8BAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,QAAL,EAAvB,EAD6B;qBAAjC;iBADJ,MAIO;AACH,wBAAI,MAAM,OAAN,EAAc;AACd,8BAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,QAAL,EAAvB,EADc;qBAAlB;iBALJ;aADJ;;AAYA,gBAAI,kBAAkB,MAAK,YAAL,CAAkB,KAAlB,CAAlB,CAdkB;;AAgBtB,gBAAI,CAAC,0BAAc,CAAd,CAAD,EAAkB;AAClB,oBAAI,CAAJ,IAAS,eAAT,CADkB;aAAtB,MAEO;AACH,oBAAI,MAAM,EAAE,KAAF,CAAQ,GAAR,CAAN,CADD;AAEH,oBAAI,gCAAoB,IAAI,CAAJ,CAApB,EAA4B,MAAK,MAAL,CAAhC,EAA6C;AACzC,wBAAI,IAAI,CAAJ,CAAJ,IAAc,eAAd,CADyC;iBAA7C;aAJJ;SAhBJ,MAwBO;AACH,gBAAI,CAAJ,IAAS,EAAT,CADG;AAEH,oBAAQ,IAAR,QAAmB,KAAnB,EAA0B,IAAI,CAAJ,CAA1B,EAAkC,IAAlC,EAFG;SAxBP;KAPC,CADT,CAF2C;CAAjC;;IAyCO;AACjB,aADiB,MACjB,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,OAAvB,EAA+B;8BADd,QACc;;AAC3B,aAAK,MAAL,GAAc,GAAd,CAD2B;AAE3B,aAAK,IAAL,GAAY,IAAZ,CAF2B;AAG3B,aAAK,OAAL,GAAe,OAAf;;;AAH2B,YAM3B,CAAK,EAAL,GAAU,EAAV,CAN2B;AAO3B,aAAK,MAAL,GAAc,EAAd,CAP2B;AAQ3B,aAAK,YAAL,GAAoB,EAApB,CAR2B;KAA/B;;iBADiB;;qCAYH,OAAO;;AAEjB,gBAAK,oBAAQ,KAAR,CAAL,EAAqB;AACjB,oBAAI,cAAc,MAAM,CAAN,CAAd,CADa;AAEjB,oBAAI,QAAQ,EAAR,CAFa;AAGjB,oBAAI,KAAK,EAAL,CAHa;;AAKjB,oBAAI,YAAY,MAAZ,EAAmB;AACnB,yBAAK,gCAAoB,YAAY,MAAZ,EAAoB,KAAK,MAAL,EAAa,KAAK,EAAL,CAA1D;;AADmB,sBAGnB,GAAK,WAAC,CAAY,YAAZ,gCAAgC,IAAI,GAAJ,CAAQ,EAAR,GAAjC,GAAgD,EAAhD,CAHc;iBAAvB;;AAMA,oBAAI,SAAS,iCAAqB,WAArB,EAAkC,GAAG,MAAH,CAA3C,CAXa;;AAajB,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAJ,EAAY,GAA5B,EAAiC;AAC7B,0BAAM,IAAN,CAAW,KAAK,aAAL,CAAmB,WAAnB,CAAX,EAD6B;iBAAjC;;AAIA,uBAAO,MAAM,MAAN,CAAa,EAAb,CAAP,CAjBiB;aAArB,MAkBO,IAAI,MAAM,OAAN,EAAc;AACrB,uBAAO,KAAK,aAAL,CAAmB,KAAnB,CAAP,CADqB;aAAlB,MAEA;AACH,uBAAO,KAAK,aAAL,CAAmB,KAAnB,CAAP,CADG;aAFA;;;;sCAOG,QAAQ;AAClB,gBAAI,SAAS,KAAK,MAAL,CADK;AAElB,gBAAI,KAAK,KAAK,EAAL,CAFS;;AAIlB,gBAAI,OAAO,KAAP,EAAa;AACb,uBAAO,uBAAW,OAAX,EAAoB,OAAO,KAAP,EAAc,MAAlC,EAA0C,EAA1C,CAAP,CADa;aAAjB,MAEO,IAAI,OAAO,MAAP,EAAe;AACtB,uBAAO,uBAAW,QAAX,EAAqB,OAAO,MAAP,EAAe,MAApC,EAA4C,EAA5C,CAAP,CADsB;aAAnB,MAEA,IAAI,OAAO,MAAP,EAAe;AACtB,uBAAO,uBAAW,QAAX,EAAqB,OAAO,MAAP,EAAe,MAApC,EAA4C,EAA5C,CAAP,CADsB;aAAnB,MAEA,IAAI,OAAO,IAAP,EAAa;AACpB,uBAAO,uBAAW,QAAX,EAAqB,OAAO,IAAP,EAAa,MAAlC,EAA0C,EAA1C,CAAP,CADoB;aAAjB,MAEA,IAAI,OAAO,EAAP,EAAW;AAClB,uBAAO,uBAAW,IAAX,EAAiB,OAAO,EAAP,EAAW,MAA5B,EAAoC,EAApC,CAAP,CADkB;aAAf,MAEA,IAAI,OAAO,OAAP,EAAgB;AACvB,oBAAI,WAAW,KAAK,EAAL,CAAQ,OAAO,OAAP,CAAnB,CADmB;AAEvB,oBAAI,IAAI,KAAK,KAAL,CAAW,SAAS,MAAT,GAAkB,KAAK,MAAL,EAAlB,CAAf,CAFmB;;AAIvB,oBAAI,CAAC,OAAO,GAAP,EAAW;AACZ,2BAAO,SAAS,CAAT,CAAP,CADY;iBAAhB,MAEO;AACH,wBAAI,SAAS,SAAS,CAAT,CAAT,CADD;AAEH,2BAAO,uBAAW,QAAX,EAAqB,OAAO,GAAP,EAAY,MAAjC,EAAyC,EAAzC,CAAP,CAFG;iBAFP;aAJG,MAWA,IAAI,OAAO,MAAP,EAAe;AACtB,oBAAI,IAAI,KAAK,KAAL,CAAW,OAAO,MAAP,CAAc,MAAd,GAAuB,KAAK,MAAL,EAAvB,CAAf,CADkB;AAEtB,uBAAO,OAAO,MAAP,CAAc,CAAd,CAAP,CAFsB;aAAnB,MAGA,IAAI,OAAO,QAAP,EAAiB;AACxB,uBAAO,8BAAkB,OAAO,QAAP,EAAiB,MAAnC,EAA2C,EAA3C,CAAP,CADwB;aAArB,MAEA,IAAI,OAAO,MAAP,EAAe;AACtB,uBAAO,OAAO,MAAP,CADe;aAAnB,MAEA,IAAI,OAAO,cAAP,CAAsB,eAAtB,CAAJ,EAA4C;AAC/C,oBAAI,IAAI,CAAJ,CAD2C;;AAG/C,oBAAI,GAAG,KAAK,IAAL,CAAH,IAAiB,GAAG,KAAK,IAAL,CAAH,CAAc,MAAd,EAAqB;AACtC,wBAAI,GAAG,KAAK,IAAL,CAAH,CAAc,MAAd,CADkC;iBAA1C;AAGA,oBAAI,OAAO,aAAP,KAAyB,IAAzB,EAA8B;AAC9B,2BAAO,aAAP,GAAuB,CAAvB,CAD8B;iBAAlC;AAGA,uBAAQ,IAAI,SAAS,OAAO,aAAP,CAAb,CATuC;aAA5C,MAUA;AACH,uBAAO,IAAP,CADG;aAVA;;;;oCAeE,QAAQ;AACjB,gBAAI,0BAAc,MAAd,CAAJ,EAA2B;AACvB,qBAAK,MAAL,GAAc,KAAK,YAAL,CAAkB,MAAlB,CAAd,CADuB;aAA3B,MAEO;AACH,wBAAQ,IAAR,CAAa,IAAb,EAAmB,MAAnB,EAA2B,KAAK,MAAL,CAA3B,CADG;aAFP;;;;8BAOG,IAAG;;;AACN,iBAAK,MAAL,GAAc,EAAd,CADM;AAEN,iBAAK,EAAL,GAAU,KAAK,EAAL,GAAU,EAAV,CAFJ;AAGN,iBAAK,EAAL,CAAQ,KAAK,IAAL,CAAR,GAAqB,EAArB,CAHM;AAIN,gBAAI,OAAO,SAAP,CAAiB,KAAK,OAAL,CAArB,EAAmC;;;;;;;;;;;;;;AAc/B,qBAAK,IAAI,IAAE,CAAF,EAAK,KAAG,KAAK,OAAL,EAAc,IAAE,EAAF,EAAM,GAArC,EAA0C;AACtC,yBAAK,WAAL,CAAiB,KAAK,MAAL,CAAjB,CADsC;AAEtC,yBAAK,EAAL,CAAQ,KAAK,IAAL,CAAR,CAAmB,IAAnB,CAAwB,KAAK,MAAL,CAAxB,CAFsC;AAGtC,yBAAK,MAAL,GAAc,EAAd,CAHsC;iBAA1C;;;;;;;;;aAdJ,MA4BO,IAAI,qBAAS,KAAK,OAAL,CAAb,EAA2B;AA5BC;AA6B/B,4BAAI,IAAI,OAAK,OAAL,CAAa,WAAb;AACR,4BAAI,eAAe,OAAK,MAAL;AACnB,4BAAI,0BAAJ;AACA,4BAAI,MAAM,GAAN,EAAW;AACX,6CAAiB,OAAK,MAAL,CAAY,MAAZ,CADN;yBAAf,MAEO;AACH,gCAAI,OAAK,MAAL,CAAY,CAAZ,CAAJ,EAAmB;AACf,oCAAI,oBAAQ,OAAK,MAAL,CAAY,CAAZ,EAAe,MAAf,CAAZ,EAAmC;AAC/B,qDAAiB,OAAK,MAAL,CAAY,CAAZ,EAAe,MAAf,CADc;iCAAnC,MAEO;AACH,qDAAiB,OAAK,MAAL,CAAY,CAAZ,CAAjB,CADG;iCAFP;6BADJ,MAMO;AACH,wCAAQ,KAAR,CAAc,eAAe,CAAf,GAAmB,mBAAnB,GAAyC,OAAK,IAAL,GAAY,cAArD,CAAd,CADG;AAEH;uCAAO,OAAK,EAAL,CAAQ,OAAK,IAAL;iCAAf,CAFG;6BANP;yBAHJ;;AAgBA,4BAAK,CAAC,oBAAQ,cAAR,CAAD,EAA0B;AAC3B,oCAAQ,KAAR,CAAc,eAAe,CAAf,GAAmB,mBAAnB,GAAyC,OAAK,IAAL,GAAY,mBAArD,CAAd,CAD2B;AAE3B;mCAAO,OAAK,EAAL,CAAQ,OAAK,IAAL;6BAAf,CAF2B;yBAA/B;;AAKA,uCAAe,GAAf,CAAmB,UAAC,KAAD,EAAW;;AAE1B,gCAAI,MAAM,GAAN,EAAW;AACX,uCADW;6BAAf;;AAIA,yCAAa,CAAb,IAAkB,EAAC,QAAQ,KAAR,EAAnB,CAN0B;;AAQ1B,mCAAK,WAAL,CAAiB,YAAjB,EAR0B;AAS1B,mCAAK,EAAL,CAAQ,OAAK,IAAL,CAAR,CAAmB,IAAnB,CAAwB,OAAK,MAAL,CAAxB,CAT0B;AAU1B,mCAAK,MAAL,GAAc,EAAd,CAV0B;yBAAX,CAAnB;wBAzB8B;;;iBAA3B,MAqCA;AACH,4BAAQ,KAAR,CAAc,eAAe,KAAK,OAAL,GAAe,qCAA9B,CAAd,CADG;iBArCA;AAwCP,mBAAO,KAAK,EAAL,CAAQ,KAAK,IAAL,CAAf,CAxEM;;;;WA9FO","file":"Schema.js","sourcesContent":["import {isObject, isArray, iamLastParent, iamLastChild, fieldArrayCalcLength, stringToFn, evalWithContextData, isConditional, fnCallWithContext} from './utils'\nimport faker from 'faker'\nimport casual from 'casual'\nimport Chance from 'chance'\nconst chance = new Chance()\n\nlet iterate = function (obj, res, currentPath) {\n    if (!currentPath) { currentPath = [] }\n    Object.keys(obj)\n        .map((k) => {\n            let value = obj[k]\n\n            let path = currentPath.slice(0)\n            path.push(k)\n\n\n            if (iamLastParent(value)) {\n\n                if (path){\n                    if ( isArray(value) ){\n                        if (value[0] && value[0].virtual){\n                            this.virtualPaths.push(path.toString())\n                        }\n                    } else {\n                        if (value.virtual){\n                            this.virtualPaths.push(path.toString())\n                        }\n                    }\n                }\n\n                let fieldCalculated = this.proccessLeaf(value)\n\n                if (!isConditional(k)){\n                    res[k] = fieldCalculated\n                } else {\n                    let key = k.split(',')\n                    if (evalWithContextData(key[0], this.result)){\n                        res[key[1]] = fieldCalculated\n                    }\n                }\n            } else {\n                res[k] = {}\n                iterate.call(this, value, res[k], path)\n            }\n        })\n}\n\nexport default class Schema {\n    constructor(name, cfg, options){\n        this.schema = cfg\n        this.name = name\n        this.options = options\n\n        // Temp fields\n        this.db = {}\n        this.result = {}\n        this.virtualPaths = []\n    }\n\n    proccessLeaf (field) {\n\n        if ( isArray(field) ){\n            let fieldConfig = field[0]\n            let array = []\n            let na = []\n\n            if (fieldConfig.concat){\n                na = evalWithContextData(fieldConfig.concat, this.result, this.db)\n                //Strict Mode\n                na = (fieldConfig.concatStrict) ? [...new Set(na)] : na\n            }\n\n            let length = fieldArrayCalcLength(fieldConfig, na.length)\n\n            for (let i = 0; i < length; i++) {\n                array.push(this.generateField(fieldConfig))\n            }\n\n            return array.concat(na)\n        } else if (field.related){\n            return this.generateField(field)\n        } else {\n            return this.generateField(field)\n        }\n    }\n\n    generateField(config) {\n        let object = this.result\n        let db = this.db\n\n        if (config.faker){\n            return stringToFn('faker', config.faker, object, db)\n        } else if (config.chance) {\n            return stringToFn('chance', config.chance, object, db)\n        } else if (config.casual) {\n            return stringToFn('casual', config.casual, object, db)\n        } else if (config.self) {\n            return stringToFn('object', config.self, object, db)\n        } else if (config.db) {\n            return stringToFn('db', config.db, object, db)\n        } else if (config.related) {\n            let entities = this.db[config.related]\n            let i = Math.floor(entities.length * Math.random());\n\n            if (!config.get){\n                return entities[i]\n            } else {\n                let entity = entities[i]\n                return stringToFn('object', config.get, entity, db)\n            }\n\n        } else if (config.values) {\n            let i = Math.floor(config.values.length * Math.random());\n            return config.values[i]\n        } else if (config.function) {\n            return fnCallWithContext(config.function, object, db)\n        } else if (config.static) {\n            return config.static\n        } else if (config.hasOwnProperty('incrementalId')) {\n            let n = 0\n\n            if (db[this.name] && db[this.name].length){\n                n = db[this.name].length\n            }\n            if (config.incrementalId === true){\n                config.incrementalId = 0\n            }\n            return (n + parseInt(config.incrementalId))\n        } else {\n            return null\n        }\n    }\n\n    buildSingle (schema) {\n        if (iamLastParent(schema)) {\n            this.result = this.proccessLeaf(schema)\n        } else {\n            iterate.call(this, schema, this.result)\n        }\n    }\n\n    build (db){\n        this.result = {}\n        this.db = db ? db : {}\n        this.db[this.name] = []\n        if (Number.isInteger(this.options)){\n\n            /*Array.from(new Array(this.options)).map(() => {\n                this.buildSingle(this.schema)\n                this.db[this.name].push(this.result)\n                this.result = {}\n            })*/\n\n            /*for (var i = 0; i < this.options; i++) {\n                this.buildSingle(this.schema)\n                this.db[this.name].push(this.result)\n                this.result = {}\n            }*/\n\n            for (var i=0, il=this.options; i<il; i++) {\n                this.buildSingle(this.schema)\n                this.db[this.name].push(this.result)\n                this.result = {}\n            }\n/*\n            let count = 0\n            while (count < this.options) {\n                this.buildSingle(this.schema)\n                this.db[this.name].push(this.result)\n                this.result = {}\n                count += 1\n            }*/\n\n        } else if (isObject(this.options)){\n            let f = this.options.uniqueField\n            let entityConfig = this.schema\n            let possibleValues\n            if (f === '.') {\n                possibleValues = this.schema.values\n            } else {\n                if (this.schema[f]){\n                    if (isArray(this.schema[f].values)){\n                        possibleValues = this.schema[f].values\n                    } else {\n                        possibleValues = this.schema[f]\n                    }\n                } else {\n                    console.error('The field ' + f + ', on the scheema ' + this.name + ' not exists.')\n                    return this.db[this.name]\n                }\n\n            }\n\n            if ( !isArray(possibleValues) ){\n                console.error('The field ' + f + ', on the scheema ' + this.name + ' is not an array.')\n                return this.db[this.name]\n            }\n\n            possibleValues.map((value) => {\n\n                if (f === '.') {\n                    return\n                }\n\n                entityConfig[f] = {static: value}\n\n                this.buildSingle(entityConfig)\n                this.db[this.name].push(this.result)\n                this.result = {}\n            })\n        } else {\n            console.error('An string ' + this.options + ', is not recognized as a parameter.')\n        }\n        return this.db[this.name]\n    }\n\n\n}\n"]}