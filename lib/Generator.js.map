{"version":3,"sources":["../src/Generator.js"],"names":["ch","Generator","cfg","faker","db","DB","object","re","matches","exec","strFn","length","eval","chance","casual","randexp","gen","self","i","Math","floor","values","random","args","function","call","static","n","name","incrementalId","parseInt","hasOne","entity","get","amount","min","max","hasMany","Array","from","map"],"mappings":"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","file":"Generator.js","sourcesContent":["\nimport R from 'randexp'\nimport f from 'faker'\nimport c from 'casual'\nimport Ch from 'chance'\nconst ch = new Ch()\n\nexport default class Generator {\n\n    faker(cfg) {\n        let faker = f\n        let db = this.DB\n        let object = this.object\n\n        let re = /(^[a-zA-Z.]*)/   //aZ.aZ\n        let matches = re.exec(cfg.faker)\n        let strFn\n        if (matches && matches.length === 2){\n            strFn = 'faker.' + cfg.faker\n        }\n\n        re = /\\((.*?)\\)/ //Match ()\n        matches = re.exec(cfg.faker)\n        if (!matches){\n            strFn = 'faker.' + cfg.faker + '()'\n        }\n\n        return eval(strFn)\n    }\n\n    chance(cfg){\n        let chance = ch\n        let db = this.DB\n        let object = this.object\n\n        let re = /(^[a-zA-Z.]*)/   //aZ.aZ\n        let matches = re.exec(cfg.chance)\n        let strFn\n        if (matches && matches.length === 2){\n            strFn = 'chance.' + cfg.chance\n        }\n\n        re = /\\((.*?)\\)/ //Match ()\n        matches = re.exec(cfg.chance)\n        if (!matches){\n            strFn = 'chance.' + cfg.chance + '()'\n        }\n\n        return eval(strFn)\n    }\n\n    casual(cfg){\n        let casual = c\n        let re = /(^[a-zA-Z.]*)/   //aZ.aZ\n        let matches = re.exec(cfg.casual)\n        let strFn\n        if (matches && matches.length === 2){\n            strFn = 'casual.' + cfg.casual\n        }\n\n        return eval(strFn)\n    }\n\n    randexp(cfg){\n        return new R(cfg.randexp).gen()\n    }\n\n    self(cfg){\n        let object = this.object\n        return eval('object.' + cfg.self)\n    }\n\n    db(cfg){\n        let db = this.DB\n        return eval('db.' + cfg.db)\n    }\n\n    eval(cfg){\n        let db = this.DB\n        let object = this.object\n        let faker = f\n        let chance = ch\n        let casual = c\n        let randexp = R\n\n        return eval(cfg.eval)\n    }\n\n    values(cfg){\n        let i = Math.floor(cfg.values.length * Math.random());\n        return cfg.values[i]\n    }\n\n    function (cfg, ...args){\n        let object = this.object\n        let db = this.DB\n        let faker = f\n        let chance = ch\n        let casual = c\n        let randexp = R\n\n        return cfg.function.call({object, db, faker, chance, casual, randexp}, ...args)\n    }\n\n    static (cfg){\n        return cfg.static\n    }\n\n    incrementalId (cfg){\n        let n = 0\n        let db = this.DB\n\n        if (db[this.name] && db[this.name].length){\n            n = db[this.name].length\n        }\n        if (cfg.incrementalId === true){\n            cfg.incrementalId = 0\n        }\n        return (n + parseInt(cfg.incrementalId))\n    }\n\n    hasOne(cfg){\n        let db = this.DB\n        let i = Math.floor(db[cfg.hasOne].length * Math.random());\n        let entity = db[cfg.hasOne][i]\n\n        if (cfg.get){\n            return eval('entity.' + cfg.get)\n        } else {\n            return entity\n        }\n    }\n\n    hasMany(cfg){\n        let amount = 1\n        let db = this.DB\n\n        let min = (cfg.min) ? cfg.min : 1\n        let max = (cfg.max) ? cfg.max : db[cfg.hasMany].length\n\n        if (cfg.amount){\n            amount = cfg.amount\n        } else {\n            amount = Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n\n        return Array.from(new Array(amount)).map(() => this.hasOne({hasOne: cfg.hasMany}))\n    }\n}\n"]}