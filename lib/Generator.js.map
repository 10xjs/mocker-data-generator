{"version":3,"sources":["../src/Generator.js"],"names":[],"mappings":"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","file":"Generator.js","sourcesContent":["\nimport R from 'randexp'\nimport f from 'faker'\nimport c from 'casual'\nimport Ch from 'chance'\nconst ch = new Ch()\n\nexport default class Generator {\n\n    faker(cfg) {\n        let faker = f\n        let db = this.DB\n        let object = this.object\n\n        let re = /(^[a-zA-Z.]*)/   //aZ.aZ\n        let matches = re.exec(cfg.faker)\n        let strFn\n        if (matches && matches.length === 2){\n            strFn = 'faker.' + cfg.faker\n        }\n\n        re = /\\((.*?)\\)/ //Match ()\n        matches = re.exec(cfg.faker)\n        if (!matches){\n            strFn = 'faker.' + cfg.faker + '()'\n        }\n\n        return eval(strFn)\n    }\n\n    chance(cfg){\n        let chance = ch\n        let db = this.DB\n        let object = this.object\n\n        let re = /(^[a-zA-Z.]*)/   //aZ.aZ\n        let matches = re.exec(cfg.chance)\n        let strFn\n        if (matches && matches.length === 2){\n            strFn = 'chance.' + cfg.chance\n        }\n\n        re = /\\((.*?)\\)/ //Match ()\n        matches = re.exec(cfg.chance)\n        if (!matches){\n            strFn = 'chance.' + cfg.chance + '()'\n        }\n\n        return eval(strFn)\n    }\n\n    casual(cfg){\n        let casual = c\n        let re = /(^[a-zA-Z.]*)/   //aZ.aZ\n        let matches = re.exec(cfg.casual)\n        let strFn\n        if (matches && matches.length === 2){\n            strFn = 'casual.' + cfg.casual\n        }\n\n        return eval(strFn)\n    }\n\n    randexp(cfg){\n        return new R(cfg.randexp).gen()\n    }\n\n    self(cfg){\n        let object = this.object\n        return eval('object.' + cfg.self)\n    }\n\n    db(cfg){\n        let db = this.DB\n        return eval('db.' + cfg.db)\n    }\n\n    eval(cfg){\n        let db = this.DB\n        let object = this.object\n        let faker = f\n        let chance = ch\n        let casual = c\n        let randexp = R\n\n        return eval(cfg.eval)\n    }\n\n    values(cfg){\n        let i = Math.floor(cfg.values.length * Math.random());\n        return cfg.values[i]\n    }\n\n    function (cfg){\n        let object = this.object\n        let db = this.DB\n        let faker = f\n        let chance = ch\n        let casual = c\n        let randexp = R\n\n        return cfg.function.call({object, db, faker, chance, casual, randexp})\n    }\n\n    static (cfg){\n        return cfg.static\n    }\n\n    incrementalId (cfg){\n        let n = 0\n        let db = this.DB\n\n        if (db[this.name] && db[this.name].length){\n            n = db[this.name].length\n        }\n        if (cfg.incrementalId === true){\n            cfg.incrementalId = 0\n        }\n        return (n + parseInt(cfg.incrementalId))\n    }\n\n    hasOne(cfg){\n        let db = this.DB\n        let i = Math.floor(db[cfg.hasOne].length * Math.random());\n        let entity = db[cfg.hasOne][i]\n\n        if (cfg.get){\n            return eval('entity.' + cfg.get)\n        } else {\n            return entity\n        }\n    }\n\n    hasMany(cfg){\n        let amount = 1\n        let db = this.DB\n\n        let min = (cfg.min) ? cfg.min : 1\n        let max = (cfg.max) ? cfg.max : db[cfg.hasMany].length\n\n        if (cfg.amount){\n            amount = cfg.amount\n        } else {\n            amount = Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n\n        return Array.from(new Array(amount)).map(() => this.hasOne({hasOne: cfg.hasMany}))\n    }\n}\n"]}