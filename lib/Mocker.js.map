{"version":3,"sources":["../src/Mocker.js"],"names":["Mocker","options","schemas","DB","name","schema","push","cb","reduce","acc","instances","build","e","console","error","Error","virtualPaths","length","forEach","x","strict","symbol","s","proccessLeaf","buildSingle","object"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,M;AAIjB,oBAAYC,OAAZ,EAAqB;AAAA;;AAAA,aAFrBC,OAEqB,GAFX,EAEW;;AACjB,aAAKD,OAAL,GAAeA,UAAUA,OAAV,GAAoB,EAAnC;AACA,aAAKE,EAAL,GAAU,EAAV;AACH;;;;+BAEMC,I,EAAMC,O,EAAQJ,O,EAAS;AAC1B,iBAAKC,OAAL,CAAaI,IAAb,CAAkB,qBAAWF,IAAX,EAAiBC,OAAjB,EAAyBJ,OAAzB,CAAlB;AACA,mBAAO,IAAP;AACH;;;gCAEQ;AACL,iBAAKE,EAAL,GAAU,EAAV;AACA,mBAAO,IAAP;AACH;;;kCAEU;AACP,iBAAKA,EAAL,GAAU,EAAV;AACA,iBAAKD,OAAL,GAAe,EAAf;AACA,mBAAO,IAAP;AACH;;;8BAEKK,E,EAAI;AACN,iBAAKL,OAAL,CAAaM,MAAb,CAAoB,UAACC,GAAD,EAAMJ,MAAN,EAAiB;AACjC,oBAAIK,kBAAJ;;AAEA,oBAAI;AACAA,gCAAYL,OAAOM,KAAP,CAAaF,GAAb,CAAZ;AACH,iBAFD,CAEE,OAAMG,CAAN,EAAQ;AACNC,4BAAQC,KAAR,CAAc,IAAIC,KAAJ,CAAU,eAAeV,OAAOD,IAAtB,GAA6B,IAA7B,GAAoCQ,CAA9C,CAAd;AACH;;AAED;AACA,oBAAIP,OAAOW,YAAP,CAAoBC,MAApB,GAA6B,CAAjC,EAAmC;AAC/BP,8BAAUQ,OAAV,CAAkB;AAAA,+BAAK,0BAAcb,OAAOW,YAArB,EAAmCG,CAAnC,EAAsC,EAACC,QAAQ,IAAT,EAAeC,QAAQ,GAAvB,EAAtC,CAAL;AAAA,qBAAlB;AACH;;AAED;AACAZ,oBAAIJ,OAAOD,IAAX,IAAmBM,SAAnB;;AAEA,uBAAOD,GAAP;AACH,aAlBD,EAkBG,KAAKN,EAlBR;AAmBA,mBAAOI,GAAG,KAAKJ,EAAR,CAAP;AACH;;AAED;;;;qCACcE,M,EAAO;AACjB,gBAAIiB,IAAI,sBAAR;AACA,mBAAOA,EAAEC,YAAF,CAAelB,MAAf,CAAP;AACH;;;qCAEaA,M,EAAO;AACjB,gBAAIiB,IAAI,sBAAR;AACAA,cAAEE,WAAF,CAAcnB,MAAd;AACA,mBAAOiB,EAAEG,MAAT;AACH;;;;;;kBA1DgBzB,M","file":"Mocker.js","sourcesContent":["import Schema from './Schema'\nimport {cleanVirtuals} from './utils'\n\nexport default class Mocker {\n\n    schemas = [];\n\n    constructor(options) {\n        this.options = options ? options : {}\n        this.DB = {}\n    }\n\n    schema(name, schema, options) {\n        this.schemas.push(new Schema(name, schema, options))\n        return this\n    }\n\n    reset () {\n        this.DB = {}\n        return this\n    }\n\n    restart () {\n        this.DB = {}\n        this.schemas = []\n        return this\n    }\n\n    build(cb) {\n        this.schemas.reduce((acc, schema) => {\n            let instances\n\n            try {\n                instances = schema.build(acc)\n            } catch(e){\n                console.error(new Error(' Schema: \"' + schema.name + '\" ' + e))\n            }\n\n            // Clean virtuals\n            if (schema.virtualPaths.length > 0){\n                instances.forEach(x => cleanVirtuals(schema.virtualPaths, x, {strict: true, symbol: ','}))\n            }\n\n            // Add to db\n            acc[schema.name] = instances\n\n            return acc\n        }, this.DB)\n        return cb(this.DB)\n    }\n\n    //proccessLeaf test\n    proccessLeaf (schema){\n        let s = new Schema()\n        return s.proccessLeaf(schema)\n    }\n\n    proccessNode (schema){\n        let s = new Schema()\n        s.buildSingle(schema)\n        return s.object\n    }\n}\n"]}