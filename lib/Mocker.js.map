{"version":3,"sources":["../src/Mocker.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAGqB,MAAM;AAIvB,aAJiB,MAAM,CAIX,OAAO,EAAE;8BAJJ,MAAM;;aAEvB,OAAO,GAAG,EAAE;;AAGR,YAAI,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,EAAE,CAAA;AACrC,YAAI,CAAC,EAAE,GAAG,EAAE,CAAA;KACf;;iBAPgB,MAAM;;+BAShB,IAAI,EAAE,OAAM,EAAE,OAAO,EAAE;AAC1B,gBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAW,IAAI,EAAE,OAAM,EAAE,OAAO,CAAC,CAAC,CAAA;AACpD,mBAAO,IAAI,CAAA;SACd;;;gCAEQ;AACL,gBAAI,CAAC,EAAE,GAAG,EAAE,CAAA;AACZ,mBAAO,IAAI,CAAA;SACd;;;kCAEU;AACP,gBAAI,CAAC,EAAE,GAAG,EAAE,CAAA;AACZ,gBAAI,CAAC,OAAO,GAAG,EAAE,CAAA;AACjB,mBAAO,IAAI,CAAA;SACd;;;8BAEK,EAAE,EAAE;AACN,gBAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM,EAAK;;AAEjC,oBAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;;;AAAA,AAGjC,oBAAI,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAC;AAC/B,6BAAS,CAAC,OAAO,CAAC,UAAA,CAAC;+BAAI,WAlC/B,aAAa,EAkCgC,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC,CAAC;qBAAA,CAAC,CAAA;iBAC7F;;;AAAA,AAGD,mBAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAA;;AAE5B,uBAAO,GAAG,CAAA;aACb,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;AACX,mBAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;SACrB;;;;;;qCAGa,MAAM,EAAC;AACjB,gBAAI,CAAC,GAAG,sBAAY,CAAA;AACpB,mBAAO,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;SAChC;;;qCAEa,MAAM,EAAC;AACjB,gBAAI,CAAC,GAAG,sBAAY,CAAA;AACpB,aAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;AACrB,mBAAO,CAAC,CAAC,MAAM,CAAA;SAClB;;;WArDgB,MAAM;;;kBAAN,MAAM","file":"Mocker.js","sourcesContent":["import Schema from './Schema'\nimport {cleanVirtuals} from './utils'\n\nexport default class Mocker {\n\n    schemas = [];\n\n    constructor(options) {\n        this.options = options ? options : {}\n        this.db = {}\n    }\n\n    schema(name, schema, options) {\n        this.schemas.push(new Schema(name, schema, options))\n        return this\n    }\n\n    reset () {\n        this.db = {}\n        return this\n    }\n\n    restart () {\n        this.db = {}\n        this.schemas = []\n        return this\n    }\n\n    build(cb) {\n        this.schemas.reduce((acc, schema) => {\n\n            let instances = schema.build(acc)\n\n            // Clean virtuals\n            if (schema.virtualPaths.length > 0){\n                instances.forEach(x => cleanVirtuals(schema.virtualPaths, x, {strict: true, symbol: ','}))\n            }\n\n            // Add to db\n            acc[schema.name] = instances\n\n            return acc\n        }, this.db)\n        return cb(this.db)\n    }\n\n    //proccessLeaf test\n    proccessLeaf (schema){\n        let s = new Schema()\n        return s.proccessLeaf(schema)\n    }\n\n    proccessNode (schema){\n        let s = new Schema()\n        s.buildSingle(schema)\n        return s.result\n    }\n}\n"]}