{"version":3,"sources":["../src/Mocker.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAGqB;AAIjB,aAJiB,MAIjB,CAAY,OAAZ,EAAqB;8BAJJ,QAII;;aAFrB,UAAU,GAEW;;AACjB,aAAK,OAAL,GAAe,UAAU,OAAV,GAAoB,EAApB,CADE;AAEjB,aAAK,EAAL,GAAU,EAAV,CAFiB;KAArB;;iBAJiB;;+BASV,MAAM,SAAQ,SAAS;AAC1B,iBAAK,OAAL,CAAa,IAAb,CAAkB,qBAAW,IAAX,EAAiB,OAAjB,EAAyB,OAAzB,CAAlB,EAD0B;AAE1B,mBAAO,IAAP,CAF0B;;;;gCAKrB;AACL,iBAAK,EAAL,GAAU,EAAV,CADK;AAEL,mBAAO,IAAP,CAFK;;;;kCAKE;AACP,iBAAK,EAAL,GAAU,EAAV,CADO;AAEP,iBAAK,OAAL,GAAe,EAAf,CAFO;AAGP,mBAAO,IAAP,CAHO;;;;8BAML,IAAI;AACN,iBAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,GAAD,EAAM,MAAN,EAAiB;AACjC,oBAAI,qBAAJ,CADiC;;AAGjC,oBAAI;AACA,gCAAY,OAAO,KAAP,CAAa,GAAb,CAAZ,CADA;iBAAJ,CAEE,OAAM,CAAN,EAAQ;AACN,4BAAQ,KAAR,CAAc,IAAI,KAAJ,CAAU,eAAe,OAAO,IAAP,GAAc,IAA7B,GAAoC,CAApC,CAAxB,EADM;iBAAR;;;AAL+B,oBAU7B,OAAO,YAAP,CAAoB,MAApB,GAA6B,CAA7B,EAA+B;AAC/B,8BAAU,OAAV,CAAkB;+BAAK,0BAAc,OAAO,YAAP,EAAqB,CAAnC,EAAsC,EAAC,QAAQ,IAAR,EAAc,QAAQ,GAAR,EAArD;qBAAL,CAAlB,CAD+B;iBAAnC;;;AAViC,mBAejC,CAAI,OAAO,IAAP,CAAJ,GAAmB,SAAnB,CAfiC;;AAiBjC,uBAAO,GAAP,CAjBiC;aAAjB,EAkBjB,KAAK,EAAL,CAlBH,CADM;AAoBN,mBAAO,GAAG,KAAK,EAAL,CAAV,CApBM;;;;;;;qCAwBI,QAAO;AACjB,gBAAI,IAAI,sBAAJ,CADa;AAEjB,mBAAO,EAAE,YAAF,CAAe,MAAf,CAAP,CAFiB;;;;qCAKP,QAAO;AACjB,gBAAI,IAAI,sBAAJ,CADa;AAEjB,cAAE,WAAF,CAAc,MAAd,EAFiB;AAGjB,mBAAO,EAAE,MAAF,CAHU;;;;WAtDJ","file":"Mocker.js","sourcesContent":["import Schema from './Schema'\nimport {cleanVirtuals} from './utils'\n\nexport default class Mocker {\n\n    schemas = [];\n\n    constructor(options) {\n        this.options = options ? options : {}\n        this.DB = {}\n    }\n\n    schema(name, schema, options) {\n        this.schemas.push(new Schema(name, schema, options))\n        return this\n    }\n\n    reset () {\n        this.DB = {}\n        return this\n    }\n\n    restart () {\n        this.DB = {}\n        this.schemas = []\n        return this\n    }\n\n    build(cb) {\n        this.schemas.reduce((acc, schema) => {\n            let instances\n\n            try {\n                instances = schema.build(acc)\n            } catch(e){\n                console.error(new Error(' Schema: \"' + schema.name + '\" ' + e))\n            }\n\n            // Clean virtuals\n            if (schema.virtualPaths.length > 0){\n                instances.forEach(x => cleanVirtuals(schema.virtualPaths, x, {strict: true, symbol: ','}))\n            }\n\n            // Add to db\n            acc[schema.name] = instances\n\n            return acc\n        }, this.DB)\n        return cb(this.DB)\n    }\n\n    //proccessLeaf test\n    proccessLeaf (schema){\n        let s = new Schema()\n        return s.proccessLeaf(schema)\n    }\n\n    proccessNode (schema){\n        let s = new Schema()\n        s.buildSingle(schema)\n        return s.object\n    }\n}\n"]}